package com.example.musicapp

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.ViewModelProvider
import com.adamratzman.spotify.*
import com.spotify.sdk.android.auth.AuthorizationResponse
import kotlinx.coroutines.runBlocking

class SpotifyAuthActivity : AppCompatActivity() {
    var mViewModel: SpotifyAuthViewModel? = null
    private var scopes: List<SpotifyScope>? = SpotifyScope.values().toList() //todo limit scopes
    private var continueButton: Button? = null
    var accTok = "";

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.spotify_auth)
        continueButton = findViewById(R.id.auth_cont)
        mViewModel = ViewModelProvider(this).get(SpotifyAuthViewModel::class.java)
        if (isSpotifyPkceAuthIntent(intent, mViewModel!!.redirectUri)) {
            runBlocking { handleSpotifyAuthenticationResponse(AuthorizationResponse.fromUri(intent?.data)) }
        }
    }

    override fun onResume() {
        super.onResume()
        if (isSpotifyPkceAuthIntent(intent, mViewModel!!.redirectUri)) {
            runBlocking { handleSpotifyAuthenticationResponse(AuthorizationResponse.fromUri(intent?.data)) }
        }
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        if (intent?.data != null) {
            setIntent(intent)
        }
    }


    private suspend fun handleSpotifyAuthenticationResponse(response: AuthorizationResponse) {
        Log.i(this.javaClass.name, "Got pkce auth response of ${response.type}")
        if (response.type != AuthorizationResponse.Type.CODE) {
            if (response.type == AuthorizationResponse.Type.TOKEN ||
                    response.type == AuthorizationResponse.Type.ERROR ||
                    response.type == AuthorizationResponse.Type.EMPTY ||
                    response.type == AuthorizationResponse.Type.UNKNOWN
            ) {
                Log.e(this.javaClass.name, "Got invalid response type... executing error handler")
                onFailure(IllegalStateException("Received response type ${response.type} which is not code.")
                )
            }

            finish()
        } else {
            val authorizationCode = response.code
            if (authorizationCode.isNullOrBlank()) {
                Log.e(this.javaClass.name, "Auth code was null or blank... executing error handler")
                onFailure(
                        IllegalStateException("Authorization code was null or blank.")
                )
            } else {

                try {
                    Log.i(this.javaClass.name, "Building client PKCE api...")
                    val api = spotifyClientPkceApi(
                            clientId = mViewModel!!.clientId,
                            redirectUri = mViewModel!!.redirectUri,
                            authorization = SpotifyUserAuthorization(
                                    authorizationCode = authorizationCode,
                                    pkceCodeVerifier = mViewModel!!.pkceCodeVerifier
                            ),
                            {}
                    ).build()

                    Log.i(this.javaClass.name, "Successfully built client PKCE api")
                    if (api.token.accessToken.isNotBlank()) {
                        mViewModel!!.credentialStore.spotifyToken = api.token
                        accTok = api.token.accessToken;
                        Log.i(this.javaClass.name, "Successful PKCE auth. Executing success handler..")
                        onSuccess(api)
                    } else {
                        Log.e(this.javaClass.name, "Failed PKCE auth - API token was blank. Executing success handler..")
                        onFailure(
                                IllegalArgumentException("API token was blank")
                        )
                    }
                } catch (exception: Exception) {
                    Log.e(this.javaClass.name, "Got error in authorization... executing error handler")
                    onFailure(exception)
                }
            }
        }
    }

    private fun getAuthorizationUrl(): Uri = getSpotifyPkceAuthorizationUrl(
            *scopes!!.toTypedArray(),
            clientId = mViewModel!!.clientId,
            redirectUri = mViewModel!!.redirectUri,
            codeChallenge = getSpotifyPkceCodeChallenge(mViewModel!!.pkceCodeVerifier),
            state = mViewModel!!.state
    ).let { Uri.parse(it) }

    private fun onSuccess(spotifyApi: SpotifyClientApi) {
        mViewModel?.credentialStore?.setSpotifyApi(spotifyApi)
        continueButton?.isEnabled = true
    }

    private fun onFailure(e: Exception) {
        Log.e(this.javaClass.name, "Error during Authorization", e)
    }

    private fun isSpotifyPkceAuthIntent(intent: Intent, redirectUri: String): Boolean {
        return intent.dataString?.startsWith("$redirectUri/?code=") == true || intent.dataString?.startsWith("$redirectUri/?error=") == true
    }

    fun on_click_auth(view: View?) {
        startActivity(Intent(Intent.ACTION_VIEW, getAuthorizationUrl()))
    }

    fun on_click_auth_cont(view: View?) {
        val i = Intent(this@SpotifyAuthActivity, MainActivity::class.java)
        startActivity(i)
    }
}
